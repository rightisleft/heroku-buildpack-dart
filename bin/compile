#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

#!/bin/bash

echo "-----> Install sassc v3.1.0"

BUILD_DIR=$1
CACHE_DIR="$2/sassc"
LIBSASS_DIR="$CACHE_DIR/libsass"
SASSC_DIR="$CACHE_DIR/sassc"
INSTALL_PATH=".heroku/sassc"
INSTALL_DIR="$BUILD_DIR/$INSTALL_PATH"
PROFILE_DIR="$BUILD_DIR/.profile.d"

indent() {
    sed -u 's/^/       /'
}

printlog() {
    echo $1 | indent
}

run_silent() {
    $1 > /dev/null 2>&1
}

mkdir -p $CACHE_DIR

if [[ ! -d "$LIBSASS_DIR/.git" ]]; then
    printlog "Downloading libsass"
    run_silent "git clone https://github.com/sass/libsass.git $LIBSASS_DIR"
fi
cd $LIBSASS_DIR
run_silent "git checkout 3.1.0"
printlog "Building libsass"
run_silent "make static"

if [[ ! -d "$SASSC_DIR/.git" ]]; then
    printlog "Downloading sassc"
    run_silent "git clone https://github.com/sass/sassc.git $SASSC_DIR"
fi
cd $SASSC_DIR
run_silent "git checkout 3.1.0"
printlog "Building sassc"
SASS_LIBSASS_PATH=$LIBSASS_DIR make build-static

printlog "Installing sassc to:"
echo $PATH

mkdir -p $INSTALL_DIR/bin
cp $SASSC_DIR/bin/sassc $INSTALL_DIR/bin/sassc


mkdir -p $PROFILE_DIR
echo "export PATH=\$PATH:\$HOME/$INSTALL_PATH/bin" > $PROFILE_DIR/sassc.sh

printlog "Acquiring runtime path"
export PATH="$PATH:$SASSC_DIR/bin"

printlog "Ensuring we have sassc"
sassc --version

# fail fast
set -e
#set -x
unset GIT_DIR

function message {
  echo "$1"
  sync
}

# https://devcenter.heroku.com/articles/buildpack-api
export_env_dir() {
  env_dir=$1
  message "-----> ENV_DIR is $env_dir"
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      message "-----> ENV_DIR contains file $e"
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir "$3"

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

# this variable is used by pub to determine the package install location
PUB_CACHE="/app/pub-cache"
export PUB_CACHE
mkdir -p $PUB_CACHE

MACHINE=`uname -a`
message "-----> Welcome, this machine is: $MACHINE"

if [ -z "$DART_SDK_URL" ]; then
    message "ERROR: you must specify DART_SDK_URL to a Dart SDK for Linux. See README for this buildpack."
    exit 1
fi

cd $BUILD_DIR

message "-----> Installing Dart VM via URL $DART_SDK_URL"

cd $CACHE_DIR

case "${DART_SDK_URL: -3}" in
  tar)
    message "SDK: tarball detected"
    curl -L -k $DART_SDK_URL -o - | tar xzf -
    ;;
  zip)
    message "SDK: zip detected"
    curl -L -k $DART_SDK_URL > dart-sdk.zip ; unzip -o -q dart-sdk.zip
    ;;
  deb)
    message "SDK: deb detected"
    # TODO
    message "Please use the .zip Dart SDK"
    ;;
  *)
    message "Invalid Dart SDK URL" #kill after this or keep going in case SDK is there from last push?
    ;;
esac

message "-----> Copy Dart binaries to app root"
cp -r $CACHE_DIR/dart-sdk $BUILD_DIR

# we need to copy the sdk into the /app folder in order for the sdk libraries
# to be referenced correctly
# reason being that the /tmp folder will be deleted after build, and /app
# resembles the location of the ready built app
cp -r $CACHE_DIR/dart-sdk /app

DART_BIN=`ls -l /app/dart-sdk/bin/dart`
message "-----> Dart cmd found at $DART_BIN"

CAN_DART_RUN=`/app/dart-sdk/bin/dart --version`
message "-----> Dart reports version: $CAN_DART_RUN"

cd $BUILD_DIR

message "-----> Add Dart To Path"
echo "export PATH=$PATH:/app/dart-sdk/bin"

message "-----> Check Env Variables: PORT, DART_ENV, INDEX_TRANSFORMER_TAG"
echo $PORT
echo $DART_ENV
echo $INDEX_TRANSFORMER_TAG

DART_FIND_DIR=.
if [ -z ${DART_BUILD_DIR_OVERRIDE+x} ];
then
    echo "DART_BUILD_DIR_OVERRIDE is unset";
else
    echo "DART_BUILD_DIR_OVERRIDE is set to '$DART_BUILD_DIR_OVERRIDE'";
    DART_FIND_DIR=$DART_BUILD_DIR_OVERRIDE
fi

for filename in `find $DART_FIND_DIR -name pubspec.yaml | grep -v dart-sdk | grep -v pub-cache`; do
    pub_dir=`dirname $filename`
    message "*** Found pubspec.yaml in $BUILD_DIR/$pub_dir"
    cd $BUILD_DIR/$pub_dir

    message "*** Running pub get"

    /app/dart-sdk/bin/pub --version

    #start pub from the /app folder to have correct symlink paths
    /app/dart-sdk/bin/pub get

    message "*** Running pub build"

    if [[ -z "$DART_BUILD_CMD" ]]
    then
        message 'Building with "pub build"'
        /app/dart-sdk/bin/pub build
    else
        message "Building with \"$DART_BUILD_CMD\""
        eval $DART_BUILD_CMD
    fi

done

# I think heroku deletes all the contents of /app and replaces it with
# whatever is in $BUILD_DIR, so copy over the pub-cache. Why not put it in
# $BUILD_DIR in the first place? because we need symlinks setup correctly.
cp -R $PUB_CACHE $BUILD_DIR/pub-cache
message `ls -l $BUILD_DIR/pub-cache`
